1
00:00:00,480 --> 00:00:03,313
(synthetic chime)

2
00:00:05,530 --> 00:00:08,760
- [Male] Now the player
can pick up this power-up

3
00:00:08,760 --> 00:00:11,730
and then it'll open up the
power-up indicator that will show

4
00:00:11,730 --> 00:00:14,070
when we have our power-ups
so we can blast our opponents

5
00:00:14,070 --> 00:00:15,973
away off of the environment.

6
00:00:17,680 --> 00:00:19,120
It's still a little bit too easy,

7
00:00:19,120 --> 00:00:21,310
so we're going to introduce
a bit more challenge

8
00:00:21,310 --> 00:00:23,630
into the game by spawning multiple enemies

9
00:00:23,630 --> 00:00:25,990
all over the screen over time.

10
00:00:25,990 --> 00:00:29,230
In our SpawnManager class,
we have exactly everything

11
00:00:29,230 --> 00:00:32,640
that we need to be able to spawn
multiple enemies over time.

12
00:00:32,640 --> 00:00:35,090
And in order to do that, we're
going to use something called

13
00:00:35,090 --> 00:00:36,460
a 'for-loop'.

14
00:00:36,460 --> 00:00:41,130
Now, a for-loop is similar
to an if-statement,

15
00:00:41,130 --> 00:00:43,530
where with an if-statement,
we used a condition

16
00:00:43,530 --> 00:00:45,520
to be able to see if something was true.

17
00:00:45,520 --> 00:00:47,160
For example, with something in our game,

18
00:00:47,160 --> 00:00:48,920
if the player picks up a power-up.

19
00:00:48,920 --> 00:00:52,220
A for-loop will enable us
to control the iterations

20
00:00:52,220 --> 00:00:53,220
that something goes through.

21
00:00:53,220 --> 00:00:56,270
So if we want something
to execute five times,

22
00:00:56,270 --> 00:00:57,103
we can do that.

23
00:00:57,103 --> 00:00:57,936
For example,

24
00:00:57,936 --> 00:01:01,280
if we want to have our Instantiate
method happen five times,

25
00:01:01,280 --> 00:01:02,680
we can use a for-loop.

26
00:01:02,680 --> 00:01:07,550
So, in our Start method, if
we type in the keyword "for",

27
00:01:07,550 --> 00:01:08,710
the way a for-loop works is

28
00:01:08,710 --> 00:01:11,860
that we actually need
three different parameters

29
00:01:11,860 --> 00:01:14,240
to be able to use this loop.

30
00:01:14,240 --> 00:01:17,700
First, we need to tell the
for-loop where to start.

31
00:01:17,700 --> 00:01:20,560
So we're going to create
a variable in here

32
00:01:20,560 --> 00:01:23,160
for our start point, and
we'll just call it "i",

33
00:01:23,160 --> 00:01:24,910
and we'll set it to zero.

34
00:01:24,910 --> 00:01:27,420
Now we need to tell the
for-loop the condition

35
00:01:27,420 --> 00:01:28,950
of when it should stop.

36
00:01:28,950 --> 00:01:33,950
As long as 'i' is less than
three, then it should continue.

37
00:01:34,410 --> 00:01:37,370
Once 'i' is not less than three,

38
00:01:37,370 --> 00:01:39,750
this will make our for-loop stop running,

39
00:01:39,750 --> 00:01:43,060
since the condition won't be true anymore.

40
00:01:43,060 --> 00:01:45,430
And then we need to tell the for-loop

41
00:01:45,430 --> 00:01:49,660
how we're going get
'i' from zero to three.

42
00:01:49,660 --> 00:01:53,503
So we can say "i=i+1".

43
00:01:57,000 --> 00:01:59,310
Another way that we can do this is similar

44
00:01:59,310 --> 00:02:01,960
to how we multiply values by itself.

45
00:02:01,960 --> 00:02:05,320
We can just say "i+=1".

46
00:02:05,320 --> 00:02:10,143
But if we actually want an even
shorter way of saying 'i+=1'

47
00:02:12,670 --> 00:02:15,371
we can actually just say "i++"

48
00:02:15,371 --> 00:02:19,470
and C# will know that this
should just add one to 'i'

49
00:02:19,470 --> 00:02:22,080
every time the for-loop goes through.

50
00:02:22,080 --> 00:02:25,910
So what'll happen is
'i' will be set to zero,

51
00:02:25,910 --> 00:02:29,230
it'll make an enemy, and
it'll add one to 'i',

52
00:02:29,230 --> 00:02:30,853
so that 'i' is equal to one.

53
00:02:31,960 --> 00:02:35,713
Then it'll make another enemy,
same thing, 'i' becomes two.

54
00:02:36,660 --> 00:02:40,640
And then it'll make another
enemy, adds one to 'i'.

55
00:02:40,640 --> 00:02:42,450
And then it'll stop making enemies.

56
00:02:42,450 --> 00:02:44,830
And then we just need to
wrap this entire thing

57
00:02:44,830 --> 00:02:49,250
in its own block, using our curly braces.

58
00:02:49,250 --> 00:02:52,440
So now this'll create three enemies.

59
00:02:52,440 --> 00:02:54,330
Now when we press play,

60
00:02:54,330 --> 00:02:57,330
you should see that we
have three enemies spawn,

61
00:02:57,330 --> 00:02:59,780
because they were all
created using our for-loop.

62
00:03:02,600 --> 00:03:03,920
Now just to help us a little bit,

63
00:03:03,920 --> 00:03:05,100
and clean up our code,

64
00:03:05,100 --> 00:03:08,940
we're going to create a new
method down at the bottom.

65
00:03:08,940 --> 00:03:11,797
So we'll call this "void SpawnEnemyWave()"

66
00:03:15,725 --> 00:03:19,225
so that this way we can spawn our enemies.

67
00:03:20,900 --> 00:03:23,830
And then we can take our code here,

68
00:03:23,830 --> 00:03:25,567
put it in SpawnEnemyWave(),

69
00:03:26,990 --> 00:03:29,287
and then just call SpawnEnemyWave().

70
00:03:32,370 --> 00:03:33,900
So, what you're going to do,

71
00:03:33,900 --> 00:03:36,170
is you're going to create a new method

72
00:03:36,170 --> 00:03:38,450
called "void SpawnEnemyWave()".

73
00:03:40,110 --> 00:03:42,503
In your method, you're
going to use a for-loop.

74
00:03:43,920 --> 00:03:46,090
You're going to use the variable 'i',

75
00:03:46,090 --> 00:03:47,480
set it to zero.

76
00:03:47,480 --> 00:03:51,150
When 'i' is less than three,
then this for-loop will stop.

77
00:03:51,150 --> 00:03:53,900
Increment 'i' plus one every time,

78
00:03:53,900 --> 00:03:57,381
and then just call the Instantiate method

79
00:03:57,381 --> 00:04:00,210
for our enemy prefab.

80
00:04:00,210 --> 00:04:03,653
And then call SpawnEnemyWave
in your start method.

81
00:04:04,500 --> 00:04:06,229
Now it's your turn.

82
00:04:06,229 --> 00:04:09,062
(synthetic chime)

